{
  "openapi": "3.0.1",
  "info": {
    "title": "OpenAPI for Query and Execution API",
    "description": "API for Querying and Executing Dune Data",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://api.dune.com/api"
    }
  ],
  "paths": {
    "/v1/query/{query_id}/execute": {
      "post": {
        "description": "Execute, or run a query for the specified query ID",
        "parameters": [
          {
            "in": "header",
            "name": "X-DUNE-API-KEY",
            "schema": {
              "type": "string"
            },
            "description": "API Key for accessing this service",
            "required": true
          },
          {
            "in": "path",
            "name": "query_id",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "unique identifier of the query"
          },
          {
            "in": "query",
            "name": "parameters",
            "required": false,
            "explode": true,
            "schema": {
              "items": {
                "$ref": "#/components/schemas/ParameterObject"
              }
            },
            "description": "Query parameters in key-value pairs. Each parameter is an object consisting of keys such as 'key', 'type', 'value', and optionally 'enumOptions'. The API allows for partial submission of parameters. For example, if the query expects three parameters and you only pass in two, the third one will automatically use its default value as defined in the API. This feature enables you to customize the query execution according to your specific needs while providing sensible defaults for unspecified parameters."
          },
          {
            "in": "query",
            "name": "performance",
            "required": false,
            "schema": {
              "items": {
                "$ref": "#/components/schemas/Performance"
              }
            },
            "description": "Defines the engine the execution will be run on. Can be either medium or large tier. Medium consumes 10 credits per run and large consumes 20 credits per run. By default performance is medium."
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "example": {
                  "execution_id": "01HKZJ2683PHF9Q9PHHQ8FW4Q1",
                  "state": "QUERY_STATE_PENDING"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The request could not be understood by the server due to malformed syntax or validation failure.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequest"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "402": {
            "description": "StatusPaymentRequired",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "example": {
                  "error": "This api request would exceed your configured limits per billing cycle. Please visit your settings on dune.com and adjust your limits to continue usage."
                }
              }
            }
          },
          "403": {
            "description": "StatusForbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "example": {
                  "error": "Not allowed to execute query. Query is archived or an unsaved query"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error occurred. This usually happens due to unexpected issues in processing the request. It may include errors such as failure in core API execution, invalid query parameters, or issues with the customer data provided.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/execution/{execution_id}/cancel": {
      "post": {
        "description": "Cancel a triggered execution request given the execution ID",
        "parameters": [
          {
            "in": "header",
            "name": "X-DUNE-API-KEY",
            "schema": {
              "type": "string"
            },
            "description": "API Key for accessing this service",
            "required": true
          },
          {
            "in": "path",
            "name": "execution_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "unique identifier of the execution"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "example": {
                  "success": true
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "example": {
                  "error": "The requested execution ID (ID: \"01HKZSP2CQHJY17BPVDF91T925\") is invalid."
                }
              }
            }
          },
          "404": {
            "description": "StatusNotFound",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "example": {
                  "error": "The requested execution ID (ID 01HKZS6KF0TDBPVJHHK9T5FDEN) was not found."
                }
              }
            }
          },
          "500": {
            "description": "Internal server error occurred. This usually happens due to unexpected issues in processing the request. It may include errors such as failure in core API execution, invalid query parameters, or issues with the customer data provided.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/execution/{execution_id}/status": {
      "get": {
        "description": "Check the status of an execution request",
        "parameters": [
          {
            "in": "header",
            "name": "X-DUNE-API-KEY",
            "schema": {
              "type": "string"
            },
            "description": "API Key for accessing this service",
            "required": true
          },
          {
            "in": "path",
            "name": "execution_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "unique identifier of the execution"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExecutionStatus"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The request could not be understood by the server due to malformed syntax or validation failure.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequest"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error occurred. This usually happens due to unexpected issues in processing the request. It may include errors such as failure in core API execution, invalid query parameters, or issues with the customer data provided.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/query/{query_id}/results": {
      "get": {
        "description": "Given a query ID, returns the latest executed result of a query on Dune",
        "parameters": [
          {
            "in": "header",
            "name": "X-DUNE-API-KEY",
            "schema": {
              "type": "string"
            },
            "description": "API Key for accessing this service",
            "required": true
          },
          {
            "in": "path",
            "name": "query_id",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "unique identifier of the query"
          },
          {
            "in": "query",
            "name": "parameters",
            "required": false,
            "explode": true,
            "schema": {
              "items": {
                "$ref": "#/components/schemas/ParameterObject"
              }
            },
            "description": "Query parameters in key-value pairs. Each parameter is an object consisting of keys such as 'key', 'type', 'value', and optionally 'enumOptions'. The API allows for partial submission of parameters. For example, if the query expects three parameters and you only pass in two, the third one will automatically use its default value as defined in the API. This feature enables you to customize the query execution according to your specific needs while providing sensible defaults for unspecified parameters."
          },
          {
            "in": "query",
            "name": "ignore_max_datapoints_per_request",
            "required": false,
            "schema": {
              "type": "boolean"
            },
            "description": "There is a default 250,000 datapoints limit to make sure you don't accidentally spend all your credits in one call. To ignore the max limit, you can add ignore_max_datapoints_per_request=true"
          },
          {
            "in": "query",
            "name": "allow_partial_results",
            "required": false,
            "schema": {
              "type": "boolean"
            },
            "description": "Sometimes request results can be too large to return. By default allow_partial_results is set to false and a failed state is returned. "
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryResult"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The request could not be understood by the server due to malformed syntax or validation failure.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequest"
                }
              }
            }
          },
          "402": {
            "description": "StatusPaymentRequired",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "example": {
                  "error": "This api request would exceed your configured limits per billing cycle. Please visit your settings on dune.com and adjust your limits to continue usage."
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error occurred. This usually happens due to unexpected issues in processing the request. It may include errors such as failure in core API execution, invalid query parameters, or issues with the customer data provided.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/query/{query_id}/results/csv": {
      "get": {
        "description": "Given a query ID, returns the latest executed result of a query on Dune in CSV format",
        "operationId": "GetQueryResultsCSV",
        "parameters": [
          {
            "in": "header",
            "name": "X-DUNE-API-KEY",
            "schema": {
              "type": "string"
            },
            "description": "API Key for accessing this service",
            "required": true
          },
          {
            "in": "path",
            "name": "query_id",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "unique identifier of the query"
          },
          {
            "in": "query",
            "name": "parameters",
            "required": false,
            "explode": true,
            "schema": {
              "items": {
                "$ref": "#/components/schemas/ParameterObject"
              }
            },
            "description": "Query parameters in key-value pairs. Each parameter is an object consisting of keys such as 'key', 'type', 'value', and optionally 'enumOptions'. The API allows for partial submission of parameters. For example, if the query expects three parameters and you only pass in two, the third one will automatically use its default value as defined in the API. This feature enables you to customize the query execution according to your specific needs while providing sensible defaults for unspecified parameters."
          },
          {
            "in": "query",
            "name": "ignore_max_datapoints_per_request",
            "required": false,
            "schema": {
              "type": "boolean"
            },
            "description": "There is a default 250,000 datapoints limit to make sure you don't accidentally spend all your credits in one call. To ignore the max limit, you can add ignore_max_datapoints_per_request=true"
          },
          {
            "in": "query",
            "name": "allow_partial_results",
            "required": false,
            "schema": {
              "type": "boolean"
            },
            "description": "Sometimes request results can be too large to return. By default allow_partial_results is set to false and a failed state is returned. "
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/csv": {
                "schema": {
                  "type": "string"
                },
                "example": "Rank,project,Total Volume,7 Days Volume,24 Hours Volume1,opensea,3.8364306116397446e+10,3.237919758883639e+07,3.3571613299256647e+06\n2,blur,8.183380589763865e+09,1.7107657915764195e+08,1.5850010061459592e+07\n3,x2y2,5.460294391448603e+09,4.0788931813965896e+06,223304.96681753657\n4,cryptopunks,2.675936453044167e+09,2.1720323415680006e+06,716042.4500000001\n5,looksrare,1.5984313877385368e+09,501530.0226954725,50185.290415\n6,superrare,3.044450076292612e+08,454080.3801810001,2711.41353\n7,foundation,2.22984396521278e+08,170730.43359724514,18791.057531650004\n8,sudoswap,1.1065119839239097e+08,91405.45237984283,49641.91309616044\n9,mooar,9.370740688511379e+07,3.816546773342194e+07,4.211704339041664e+06\n10,pancakeswap,8.577468809809853e+07,42632.499992789955,5097.792944599999\n11,tofu,6.714663559364942e+07,76521.97898920579,5380.136450808099\n12,element,6.122191042346895e+07,74343.29233116966,21615.498594265555\n13,zora,4.001828856803733e+07,<nil>,<nil>\n14,liquidifty,2.9701757197915018e+07,0.029847000000000005,0.029847000000000005\n15,quix,1.0831134834643008e+07,<nil>,<nil>\n16,magiceden,9.29307966848028e+06,4454.432874887,87.15784495\n17,rarible,5.376697231248505e+06,51386.83617665664,4985.105076420629\n18,archipelago,5.37401337817133e+06,<nil>,<nil>\n19,aavegotchi,3.0300035670567774e+06,20759.276957762435,3149.030878339999\n20,nftrade,1.7161576961230598e+06,26676.274663999986,106.961753999999\n21,dew,1.4541526609272424e+06,<nil>,<nil>\n22,nftb,1.336229907297191e+06,<nil>,<nil>\n23,decentraland,401287.6963697007,1036.6580888416527,60.78021429999997\n24,zonic,300264.3745252976,72.93842523849997,12.032011452799999\n25,nftearth,84818.42127523685,<nil>,<nil>\n26,aurem,464.10303347643816,9.788748,<nil>\n27,fractal,183.85717919121993,<nil>,<nil>\n28,oneplanet,131.71013616000002,<nil>,<nil>"
              }
            }
          },
          "400": {
            "description": "Bad Request - The request could not be understood by the server due to malformed syntax or validation failure.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequest"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "402": {
            "description": "StatusPaymentRequired",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "example": {
                  "error": "This api request would exceed your configured limits per billing cycle. Please visit your settings on dune.com and adjust your limits to continue usage."
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error occurred. This usually happens due to unexpected issues in processing the request. It may include errors such as failure in core API execution, invalid query parameters, or issues with the customer data provided.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/execution/{execution_id}/results": {
      "get": {
        "description": "Given an execution ID, returns result of a an execution request",
        "parameters": [
          {
            "in": "header",
            "name": "X-DUNE-API-KEY",
            "schema": {
              "type": "string"
            },
            "description": "API Key for accessing this service",
            "required": true
          },
          {
            "in": "path",
            "name": "execution_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "unique identifier of the execution"
          },
          {
            "in": "query",
            "name": "ignore_max_datapoints_per_request",
            "required": false,
            "schema": {
              "type": "boolean"
            },
            "description": "There is a default 250,000 datapoints limit to make sure you don't accidentally spend all your credits in one call. To ignore the max limit, you can add ignore_max_datapoints_per_request=true"
          },
          {
            "in": "query",
            "name": "allow_partial_results",
            "required": false,
            "schema": {
              "type": "boolean"
            },
            "description": "Sometimes request results can be too large to return. By default allow_partial_results is set to false and a failed state is returned. "
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryResult"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "example": {
                  "error": "The requested execution ID (ID: 01HKZW3PD00VEX36QYZ1FNRA3) is invalid."
                }
              }
            }
          },
          "402": {
            "description": "StatusPaymentRequired",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "example": {
                  "error": "This api request would exceed your configured limits per billing cycle. Please visit your settings on dune.com and adjust your limits to continue usage."
                }
              }
            }
          },
          "500": {
            "description": "Internal server error occurred. This usually happens due to unexpected issues in processing the request. It may include errors such as failure in core API execution, invalid query parameters, or issues with the customer data provided.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/execution/{execution_id}/results/csv": {
      "get": {
        "description": "Given an execution ID, returns result of a an execution request in CSV format",
        "parameters": [
          {
            "in": "header",
            "name": "X-DUNE-API-KEY",
            "schema": {
              "type": "string"
            },
            "description": "API Key for accessing this service",
            "required": true
          },
          {
            "in": "path",
            "name": "execution_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "unique identifier of the execution"
          },
          {
            "in": "query",
            "name": "ignore_max_datapoints_per_request",
            "required": false,
            "schema": {
              "type": "boolean"
            },
            "description": "There is a default 250,000 datapoints limit to make sure you don't accidentally spend all your credits in one call. To ignore the max limit, you can add ignore_max_datapoints_per_request=true"
          },
          {
            "in": "query",
            "name": "allow_partial_results",
            "required": false,
            "schema": {
              "type": "boolean"
            },
            "description": "Sometimes request results can be too large to return. By default allow_partial_results is set to false and a failed state is returned. "
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/csv": {
                "schema": {
                  "type": "string"
                },
                "example": "Rank,project,Total Volume,7 Days Volume,24 Hours Volume\n1,opensea,3.8364306116397446e+10,3.237919758883639e+07,3.3571613299256647e+06\n2,blur,8.183380589763865e+09,1.7107657915764195e+08,1.5850010061459592e+07\n3,x2y2,5.460294391448603e+09,4.0788931813965896e+06,223304.96681753657\n4,cryptopunks,2.675936453044167e+09,2.1720323415680006e+06,716042.4500000001\n5,looksrare,1.5984313877385368e+09,501530.0226954725,50185.290415\n6,superrare,3.044450076292612e+08,454080.3801810001,2711.41353\n7,foundation,2.22984396521278e+08,170730.43359724514,18791.057531650004\n8,sudoswap,1.1065119839239097e+08,91405.45237984283,49641.91309616044\n9,mooar,9.370740688511379e+07,3.816546773342194e+07,4.211704339041664e+06\n10,pancakeswap,8.577468809809853e+07,42632.499992789955,5097.792944599999\n11,tofu,6.714663559364942e+07,76521.97898920579,5380.136450808099\n12,element,6.122191042346895e+07,74343.29233116966,21615.498594265555\n13,zora,4.001828856803733e+07,<nil>,<nil>\n14,liquidifty,2.9701757197915018e+07,0.029847000000000005,0.029847000000000005\n15,quix,1.0831134834643008e+07,<nil>,<nil>\n16,magiceden,9.29307966848028e+06,4454.432874887,87.15784495\n17,rarible,5.376697231248505e+06,51386.83617665664,4985.105076420629\n18,archipelago,5.37401337817133e+06,<nil>,<nil>\n19,aavegotchi,3.0300035670567774e+06,20759.276957762435,3149.030878339999\n20,nftrade,1.7161576961230598e+06,26676.274663999986,106.961753999999\n21,dew,1.4541526609272424e+06,<nil>,<nil>\n22,nftb,1.336229907297191e+06,<nil>,<nil>\n23,decentraland,401287.6963697007,1036.6580888416527,60.78021429999997\n24,zonic,300264.3745252976,72.93842523849997,12.032011452799999\n25,nftearth,84818.42127523685,<nil>,<nil>\n26,aurem,464.10303347643816,9.788748,<nil>\n27,fractal,183.85717919121993,<nil>,<nil>\n28,oneplanet,131.71013616000002,<nil>,<nil>"
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "example": {
                  "error": "The requested execution ID (ID: 01HKZW3PD00VEX36QYZ1FNRA3) is invalid."
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "402": {
            "description": "StatusPaymentRequired",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "example": {
                  "error": "This api request would exceed your configured limits per billing cycle. Please visit your settings on dune.com and adjust your limits to continue usage."
                }
              }
            }
          },
          "409": {
            "description": "Conflict for url",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "example": {
                  "error": "Query state is not QUERY_STATE_CANCELLED, cannot provide CSV Result",
                  "errorDetails": null,
                  "state": "QUERY_STATE_CANCELLED"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error occurred. This usually happens due to unexpected issues in processing the request. It may include errors such as failure in core API execution, invalid query parameters, or issues with the customer data provided.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "QueryResult": {
        "type": "object",
        "required": ["execution_id", "query_id", "state", "submitted_at"],
        "example": {
          "execution_id": "01HKZSJAW6N2MFVCBHA3R8S64X",
          "query_id": 1252207,
          "state": "QUERY_STATE_COMPLETED",
          "submitted_at": "2024-01-12T21:34:37.447476Z",
          "expires_at": "2024-04-11T21:34:55.737082Z",
          "execution_started_at": "2024-01-12T21:34:37.464387Z",
          "execution_ended_at": "2024-01-12T21:34:55.737081Z",
          "result": {
            "metadata": {
              "column_names": [
                "Rank",
                "project",
                "Total Volume",
                "7 Days Volume",
                "24 Hours Volume"
              ],
              "result_set_bytes": 440,
              "total_row_count": 8,
              "datapoint_count": 40,
              "pending_time_millis": 16,
              "execution_time_millis": 18272
            },
            "rows": [
              {
                "24 Hours Volume": 3357161.3299256647,
                "7 Days Volume": 32379197.58883639,
                "Total Volume": 38364306116.397446,
                "project": "opensea"
              },
              {
                "24 Hours Volume": 15850010.061459592,
                "7 Days Volume": 171076579.15764195,
                "Total Volume": 8183380589.763865,
                "project": "blur"
              },
              {
                "24 Hours Volume": 223304.96681753657,
                "7 Days Volume": 4078893.1813965896,
                "Total Volume": 5460294391.448603,
                "project": "x2y2"
              },
              {
                "24 Hours Volume": 716042.4500000001,
                "7 Days Volume": 2172032.3415680006,
                "Total Volume": 2675936453.044167,
                "project": "cryptopunks"
              },
              {
                "24 Hours Volume": 50185.290415,
                "7 Days Volume": 501530.0226954725,
                "Total Volume": 1598431387.7385368,
                "project": "looksrare"
              },
              {
                "24 Hours Volume": 2711.41353,
                "7 Days Volume": 454080.3801810001,
                "Total Volume": 304445007.6292612,
                "project": "superrare"
              },
              {
                "24 Hours Volume": 18791.057531650004,
                "7 Days Volume": 170730.43359724514,
                "Total Volume": 222984396.521278,
                "project": "foundation"
              },
              {
                "24 Hours Volume": 109144.69140446292,
                "7 Days Volume": 248139.50609401206,
                "Rank": 8,
                "Total Volume": 110818263.99090719,
                "project": "sudoswap"
              }
            ]
          }
        },
        "properties": {
          "execution_id": {
            "type": "string",
            "description": "Unique identifier for the execution of the query.",
            "example": "01HKZSJAW6N2MFVCBHA3R8S64X"
          },
          "query_id": {
            "type": "integer",
            "description": "Unique identifier of the query.",
            "example": 1252207
          },
          "state": {
            "type": "string",
            "description": "The state of the query execution.",
            "example": "QUERY_STATE_COMPLETED"
          },
          "submitted_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when the query was submitted.",
            "example": "2024-01-12T21:34:37.447476Z"
          },
          "expires_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when the query result expires.",
            "example": "2024-04-11T21:34:55.737082Z"
          },
          "execution_started_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when the query execution started.",
            "example": "2024-01-12T21:34:37.464387Z"
          },
          "execution_ended_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when the query execution ended.",
            "example": "2024-01-12T21:34:55.737081Z"
          },
          "cancelled_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when the query execution was cancelled, if applicable."
          },
          "result": {
            "$ref": "#/components/schemas/QueryResultData"
          },
          "error": {
            "$ref": "#/components/schemas/QueryResultError"
          }
        }
      },
      "ExecutionStatus": {
        "type": "object",
        "required": ["execution_id", "query_id", "state", "submitted_at"],
        "properties": {
          "execution_id": {
            "type": "string",
            "description": "Unique identifier for the execution of the query.",
            "example": "01HKZSJAW6N2MFVCBHA3R8S64X"
          },
          "query_id": {
            "type": "integer",
            "description": "Unique identifier of the query.",
            "example": 1252207
          },
          "state": {
            "type": "string",
            "description": "The state of the query execution.",
            "example": "QUERY_STATE_COMPLETED"
          },
          "submitted_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when the query was submitted.",
            "example": "2024-01-12T21:34:37.447476Z"
          },
          "expires_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when the query result expires.",
            "example": "2024-04-11T21:34:55.737082Z"
          },
          "execution_started_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when the query execution started.",
            "example": "2024-01-12T21:34:37.464387517Z"
          },
          "execution_ended_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when the query execution ended.",
            "example": "2024-01-12T21:34:55.737081299Z"
          },
          "cancelled_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when the query execution was cancelled, if applicable.",
            "example": "2023-04-08T12:27:15.749154Z"
          },
          "result_metadata": {
            "$ref": "#/components/schemas/ExecutionResultMetadata"
          }
        }
      },
      "QueryResultData": {
        "type": "object",
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/ExecutionResultMetadata"
          },
          "rows": {
            "$ref": "#/components/schemas/QueryResultRow"
          }
        }
      },
      "QueryResultError": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "The type of error that occurred."
          },
          "message": {
            "type": "string",
            "description": "A descriptive message about the error."
          },
          "metadata": {
            "$ref": "#/components/schemas/SyntaxErrorMetadata"
          }
        }
      },
      "QueryResultRow": {
        "type": "object",
        "description": "A row is dictionary of key-value pairs returned by the query, each pair corresponding to a column",
        "example": [
          {
            "24 Hours Volume": 8466988.095521685,
            "7 Days Volume": 39146349.94906045,
            "Rank": 1,
            "Total Volume": 38382979226.241264,
            "project": "opensea"
          },
          {
            "24 Hours Volume": 21838779.932517685,
            "7 Days Volume": 162466310.33138418,
            "Rank": 2,
            "Total Volume": 8237501261.688846,
            "project": "blur"
          },
          {
            "24 Hours Volume": 671472.4583508199,
            "7 Days Volume": 4017792.3280940033,
            "Rank": 3,
            "Total Volume": 5461953781.154043,
            "project": "x2y2"
          },
          {
            "24 Hours Volume": 1286407.4659000002,
            "7 Days Volume": 5173193.591668,
            "Rank": 4,
            "Total Volume": 2679750259.5093665,
            "project": "cryptopunks"
          },
          {
            "24 Hours Volume": 56173.5344355522,
            "7 Days Volume": 554016.6849051005,
            "Rank": 5,
            "Total Volume": 1598674364.7416763,
            "project": "looksrare"
          },
          {
            "24 Hours Volume": 19296.919182499998,
            "7 Days Volume": 104063.2939935,
            "Rank": 6,
            "Total Volume": 304480783.11624366,
            "project": "superrare"
          },
          {
            "24 Hours Volume": 10126.247481873,
            "7 Days Volume": 161524.37162494668,
            "Rank": 7,
            "Total Volume": 223026861.49473178,
            "project": "foundation"
          },
          {
            "24 Hours Volume": 109144.69140446292,
            "7 Days Volume": 248139.50609401206,
            "Rank": 8,
            "Total Volume": 110818263.99090719,
            "project": "sudoswap"
          }
        ]
      },
      "SyntaxErrorMetadata": {
        "type": "object",
        "properties": {
          "line": {
            "type": "integer",
            "description": "The line number at which the syntax error occurred."
          },
          "column": {
            "type": "integer",
            "description": "The column number at which the syntax error occurred."
          }
        }
      },
      "ExecutionResultMetadata": {
        "type": "object",
        "description": "Metadata about the execution of the query, including details like column names, row counts, and execution times.",
        "example": {
          "column_names": [
            "Rank",
            "project",
            "Total Volume",
            "7 Days Volume",
            "24 Hours Volume"
          ],
          "result_set_bytes": 440,
          "total_row_count": 8,
          "datapoint_count": 40,
          "pending_time_millis": 16,
          "execution_time_millis": 18272
        },
        "properties": {
          "column_names": {
            "type": "array",
            "description": "Names of the columns in the result set.",
            "example": [
              "Rank",
              "project",
              "Total Volume",
              "7 Days Volume",
              "24 Hours Volume"
            ]
          },
          "result_set_bytes": {
            "type": "integer",
            "description": "Total number of bytes in the result set.",
            "example": 1541
          },
          "total_row_count": {
            "type": "integer",
            "description": "Total number of rows in the result set.",
            "example": 28
          },
          "datapoint_count": {
            "type": "integer",
            "description": "The count of datapoints used for billing/pricing, based on the result set.",
            "example": 140
          },
          "pending_time_millis": {
            "type": "integer",
            "description": "Time in milliseconds that the query was pending before execution.",
            "example": 16
          },
          "execution_time_millis": {
            "type": "integer",
            "description": "Time in milliseconds that the query took to execute.",
            "example": 18272
          }
        }
      },
      "ParameterObject": {
        "type": "object",
        "required": ["key"],
        "properties": {
          "key": {
            "type": "string",
            "description": "The key name of the parameter."
          },
          "description": {
            "type": "string",
            "description": "A brief description of the parameter."
          },
          "value": {
            "type": "string",
            "description": "The default value used by this parameter during execution, format depends on the type."
          },
          "values": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "An array of string values, used when multiple selections are allowed."
          },
          "type": {
            "type": "string",
            "enum": ["number", "text", "datetime", "enum"],
            "description": "The type of the parameter, determines the format of 'value(s)'. 'number': Numeric parameters, the value must be a number (e.g., '20'). 'text': String parameters, value can be any text including hex 0x-prefixed values (e.g., '0xae2fc...'), an empty value defaults to an empty string. 'datetime': Date and time parameters, value must be in 'YYYY-MM-DD hh:mm:ss' format (e.g., '2021-12-31 23:59:59'). 'enum': Parameters with a specific list of values, 'EnumValues' field is mandatory, providing a JSON list of strings representing valid options, the 'value' must be one of these options (e.g., 'Option1')."
          },
          "EnumValues": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of valid options for 'enum' type parameters."
          },
          "isMultiselect": {
            "type": "boolean",
            "description": "Indicates if multiple selections are allowed for this parameter."
          },
          "isFreeformAllowed": {
            "type": "boolean",
            "description": "Indicates if freeform input is allowed for this parameter."
          },
          "enumFromResults": {
            "$ref": "#/components/schemas/EnumFromResults"
          }
        }
      },
      "EnumFromResults": {
        "type": "object",
        "properties": {
          "query_id": {
            "type": "integer",
            "description": "The ID of the query to fetch results from."
          },
          "columnName": {
            "type": "string",
            "description": "The column name to use from the query results."
          }
        }
      },
      "Performance": {
        "type": "string",
        "enum": ["medium", "large"],
        "description": "Defines the engine the execution will be run on. Can be either medium or large tier. Medium consumes 10 credits per run, and large consumes 20 credits per run. By default, performance is medium."
      },
      "UnauthorizedError": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "401 unauthorized error for invalid API key",
            "example": "invalid API Key"
          }
        }
      },
      "NotFoundError": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "404 error message for resource not found",
            "example": "not found"
          }
        }
      },
      "BadRequest": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "400: The request could not be understood by the server due to malformed syntax or validation failure.",
            "example": "core request validation failed"
          }
        }
      },
      "InternalServerError": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "example": "internal error"
          }
        },
        "description": "500: Generic error message, given when an unexpected condition is encountered and no more specific message is available. Please consult the API documentation for more details."
      }
    }
  }
}
